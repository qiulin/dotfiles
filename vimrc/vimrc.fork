nmap <leader>w :w<CR>
nmap <leader>q :q<CR>
nmap <leader>sh :VimShell<CR>
nmap <leader>be :BufExplorer<CR>
nmap <leader>h :UpdateTypesFile<CR>
nmap <leader>tn :tabnew<CR>
nmap <leader>pd :Pyclewn pdb %<CR>
let g:tagbar_width = 30

set linespace=1
set guioptions-=r
"set guifont=Source\ Code\ Pro\ Powerline\ 13
set guifont=Monaco\ 12
set nospell
set shell=/bin/zsh

" for golang
let g:tagbar_type_go = {
            \ 'ctagstype' : 'go',
            \ 'kinds'     : [
            \ 'p:package',
            \ 'i:imports:1',
            \ 'c:constants',
            \ 'v:variables',
            \ 't:types',
            \ 'n:interfaces',
            \ 'w:fields',
            \ 'e:embedded',
            \ 'm:methods',
            \ 'r:constructor',
            \ 'f:functions'
            \ ],
            \ 'sro' : '.',
            \ 'kind2scope' : {
            \ 't' : 'ctype',
            \ 'n' : 'ntype'
            \ },
            \ 'scope2kind' : {
            \ 'ctype' : 't',
            \ 'ntype' : 'n'
            \ },
            \ 'ctagsbin'  : 'gotags',
            \ 'ctagsargs' : '-sort -silent'
            \ }


" ruby
autocmd FileType ruby compiler ruby

"" vimshell
let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
"let g:vimshell_right_prompt = 'vcs#info("(%s)-[%b]", "(%s)-[%b|%a]")'

if has('win32') || has('win64')
    " Display user name on Windows.
    let g:vimshell_prompt = $USERNAME."% "
else
    " Display user name on Linux.
    let g:vimshell_prompt = $USER."% "
endif

" Initialize execute file list.
let g:vimshell_execute_file_list = {}
call vimshell#set_execute_file('txt,vim,c,h,cpp,d,xml,java', 'vim')
let g:vimshell_execute_file_list['rb'] = 'ruby'
let g:vimshell_execute_file_list['pl'] = 'perl'
let g:vimshell_execute_file_list['py'] = 'python'
call vimshell#set_execute_file('html,xhtml', 'gexe firefox')

autocmd FileType vimshell
            \ call vimshell#altercmd#define('g', 'git')
            \| call vimshell#altercmd#define('i', 'iexe')
            \| call vimshell#altercmd#define('l', 'll')
            \| call vimshell#altercmd#define('ll', 'ls -l')
            \| call vimshell#hook#add('chpwd', 'my_chpwd', 'g:my_chpwd')

function! g:my_chpwd(args, context)
    call vimshell#execute('ls')
endfunction

autocmd FileType int-* call s:interactive_settings()
function! s:interactive_settings()
endfunction

" Like g:neocomplcache_snippets_disable_runtime_snippets
" behavior(all runtime snippets are disabled).
let g:neosnippet#disable_runtime_snippets = {
 \   '_' : 1,
     \ }

"" pymode
let g:pymode_rope_lookup_project = 0


let g:NERDSpaceDelims = 1
